# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar Date
scalar Decimal
scalar UUID
scalar PortfolioAccountType
scalar PortfolioTransactionType
scalar PortfolioTransactionUnitType

type Currency {
  code: String!
  exchangeratesBase: [Exchangerate!]!
	exchangeratesQuote: [Exchangerate!]!
}

type Event {
  date: String!
  type: String!
  amount: String
  currencyCode: String
  ratio: String
}

type Exchangerate {
  baseCurrencyCode: String!
  quoteCurrencyCode: String!
  prices(from: String): [ExchangeratePrice!]!
}

type ExchangeratePrice {
  date: String!
  value: String!
}

type Portfolio {
  id: Int!
  name: String!
  note: String!
  baseCurrencyCode: String!
  createdAt: Time!
  updatedAt: Time!
}

input PortfolioInput {
  name: String!
  note: String!
  baseCurrencyCode: String!
}

type PortfolioAccount {
  uuid: UUID!
  type: PortfolioAccountType!
  name: String!
  currencyCode: String
  referenceAccountUuid: UUID
  active: Boolean!
  note: String!
  updatedAt: Time!

  balance: String!
  value(currencyCode: String): String!
}

input PortfolioAccountInput {
  type: PortfolioAccountType!
  name: String!
  currencyCode: String
  referenceAccountUuid: UUID
  active: Boolean!
  note: String!
  updatedAt: Time
}

type PortfolioSecurity {
  portfolioId: Int!
  uuid: UUID!
  name: String!
  currencyCode: String!
  isin: String!
  wkn: String!
  symbol: String!
  active: Boolean!
  note: String!
  securityUuid: UUID
  updatedAt: Time!
  calendar: String
  feed: String
  feedUrl: String
  latestFeed: String
  latestFeedUrl: String
  events: [PortfolioSecurityEvent!]!
  properties: [PortfolioSecurityProperty!]!

  # computed:
  shares: Decimal!
  quote(currenyCode: String): String!
}

input PortfolioSecurityKey {
  portfolioId: Int!
  uuid: UUID!
}

input PortfolioSecurityInput {
  name: String!
  currencyCode: String!
  isin: String!
  wkn: String!
  symbol: String!
  active: Boolean!
  note: String!
  securityUuid: UUID
  updatedAt: Time
  calendar: String
  feed: String
  feedUrl: String
  latestFeed: String
  latestFeedUrl: String
  events: [PortfolioSecurityEventInput!]!
  properties: [PortfolioSecurityPropertyInput!]!
}

type PortfolioSecurityEvent {
  date: Date!
  type: String!
  details: String!
}

input PortfolioSecurityEventInput {
  date: Date!
  type: String!
  details: String!
}

type PortfolioSecurityProperty {
  name: String!
  type: String!
  value: String!
}

input PortfolioSecurityPropertyInput {
  name: String!
  type: String!
  value: String!
}

type PortfolioTransaction {
  uuid: UUID!
  accountUuid: UUID!
  type: PortfolioTransactionType!
  datetime: Time!
  partnerTransactionUuid: UUID
  shares: Decimal
  portfolioSecurityUuid: UUID
  note: String!
  updatedAt: Time!
  units: [PortfolioTransactionUnit!]!
}

input PortfolioTransactionInput {
  accountUuid: UUID!
  type: PortfolioTransactionType!
  datetime: Time!
  partnerTransactionUuid: UUID
  shares: Decimal
  portfolioSecurityUuid: UUID
  note: String!
  updatedAt: Time
  units: [PortfolioTransactionUnitInput!]!
}

type PortfolioTransactionUnit {
  type: PortfolioTransactionUnitType!
  amount: Decimal!
  currencyCode: String!
  originalAmount: Decimal
  originalCurrencyCode: String
  exchangeRate: Decimal
}

input PortfolioTransactionUnitInput {
  type: PortfolioTransactionUnitType!
  amount: Decimal!
  currencyCode: String!
  originalAmount: Decimal
  originalCurrencyCode: String
  exchangeRate: Decimal
}

type Security {
  uuid: UUID!
  name: String
  isin: String
  wkn: String
  securityType: String
  symbolXfra: String
  symbolXnas: String
  symbolXnys: String

  securityMarkets: [SecurityMarket!]!
  securityTaxonomies: [SecurityTaxonomy!]!
  events: [Event!]!
}

input SecurityInput {
  name: String
  isin: String
  wkn: String
  securityType: String
  symbolXfra: String
  symbolXnas: String
  symbolXnys: String
}

type SecurityMarket {
  securityUuid: UUID!
  marketCode: String!
  currencyCode: String!
  firstPriceDate: Date
  lastPriceDate: Date
  symbol: String
  updatePrices: Boolean
}

type SecurityTaxonomy {
  securityUuid: UUID!
  taxonomyUuid: UUID!
  weight: Decimal!
  taxonomy: Taxonomy!
}

input SecurityTaxonomyInput {
  taxonomyUuid: UUID!
  weight: Decimal!
}

type Session {
  token: ID!
  note: String!
  user: User!
  createdAt: Time!
  lastActivityAt: Time!
}

type Taxonomy {
  uuid: UUID!
  parentUuid: UUID
  rootUuid: UUID
  name: String!
  code: String
}

input TaxonomyInput {
  parentUuid: UUID
  rootUuid: UUID
  name: String!
  code: String
}

type User {
  id: Int!
  username: String!
  isAdmin: Boolean!
  lastSeenAt: String!
}

type Query {
  currencies: [Currency!]!
  exchangerate(baseCurrencyCode: String!, quoteCurrencyCode: String!): Exchangerate!

  portfolios: [Portfolio!]!
  portfolio(id: Int!): Portfolio!

  portfolioAccounts(portfolioId: Int!): [PortfolioAccount!]!
  portfolioSecurities(portfolioId: Int!): [PortfolioSecurity!]!
  portfolioSecurity(portfolioId: Int!, uuid: UUID!): PortfolioSecurity!

  security(uuid: UUID!): Security!

  sessions: [Session!]!
}

type Mutation {
  register(username: String!, password: String!): Session!
  login(username: String!, password: String!): Session!
  createSession(note: String!): Session!
  deleteSession(token: String!): Session!

  createPortfolio(portfolio: PortfolioInput!): Portfolio!
  updatePortfolio(id: Int!, portfolio: PortfolioInput!): Portfolio!
  deletePortfolio(id: Int!): Portfolio!
}

